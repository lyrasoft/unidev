{"version":3,"sources":["aws/s3-uploader.js"],"names":["S3Uploader","name","instances","args","options","$","extend","constructor","defaultOptions","file","path","fileData","FormData","inputs","formInputs","Blob","type","File","encodeURIComponent","trimSlashes","subfolder","key","set","Object","keys","starts_with","append","trigger","post","url","endpoint","data","processData","contentType","xhr","XMLHttpRequest","upload","addEventListener","e","lengthComputable","loaded","total","done","res","textStatus","fail","console","error","always","str","replace","PhoenixEventMixin","acl","bucket","Policy"],"mappings":"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","sourcesContent":["/**\n * Part of earth project.\n *\n * @copyright  Copyright (C) 2019 ${ORGANIZATION}.\n * @license    __LICENSE__\n */\n\nclass S3Uploader extends PhoenixEventMixin(class {}) {\n  static defaultOptions = {\n    endpoint: '',\n    subfolder: '',\n    starts_with: [],\n    formInputs: {\n      acl: '',\n      bucket: '',\n      key: '',\n      Policy: '',\n      'X-Amz-Algorithm': '',\n      'X-Amz-Credential': '',\n      'X-Amz-Date': '',\n      'X-Amz-Signature': '',\n    }\n  };\n\n  static instances = {};\n\n  /**\n   * @param {string} name\n   * @param {*}      args\n   *\n   * @returns {S3Uploader}\n   */\n  static getInstance(name, ...args) {\n    if (!this.instances[name]) {\n      this.instances[name] = new this(name, ...args);\n    }\n\n    return this.instances[name];\n  }\n\n  constructor(name, options = {}) {\n    super();\n\n    this.name = name;\n    this.options = $.extend(true, {}, this.constructor.defaultOptions, options);\n  }\n\n  /**\n   * Do upload.\n   *\n   * @param {string|File|Blob} file\n   * @param {string}           path\n   * @param {Object}           options\n   *\n   * @returns {Promise}\n   */\n  upload(file, path, options = {}) {\n    const fileData = new FormData();\n    const inputs = $.extend({}, this.options.formInputs);\n\n    if (typeof file === 'string') {\n      file = new Blob([file], {type: options['Content-Type'] || 'text/plain'});\n    }\n\n    if (file instanceof Blob || file instanceof File) {\n      options['Content-Type'] = options['Content-Type'] || file.type;\n    }\n\n    if (options['filename']) {\n      options['Content-Disposition'] = 'attachment; filename*=UTF-8\\'\\'' + encodeURIComponent(options['filename']);\n    }\n\n    options['key'] = this.constructor.trimSlashes(this.options.subfolder) + '/'\n      + this.constructor.trimSlashes(path);\n    options['Content-Type'] = options['Content-Type'] || null;\n    options['Content-Disposition'] = options['Content-Disposition'] || null;\n\n    // Prepare pre-signed data\n    for (let key in inputs) {\n      fileData.set(key, inputs[key]);\n    }\n\n    // Prepare custom data\n    for (let key of Object.keys(this.options.starts_with)) {\n      if (options[key]) {\n        fileData.set(key, options[key]);\n      }\n    }\n\n    fileData.append('file', file);\n\n    this.trigger('start', fileData);\n\n    return $.post({\n        url: this.options.endpoint,\n        data: fileData,\n        processData: false,\n        contentType: false,\n        type: 'POST',\n        xhr: () => {\n          const xhr = new XMLHttpRequest();\n\n          if(xhr.upload){\n            xhr.upload.addEventListener('progress', e => {\n              this.trigger('upload-progress', e);\n\n              if (e.lengthComputable) {\n                this.trigger('progress', e.loaded / e.total, e);\n              }\n            }, false);\n          }\n\n          return xhr;\n        },\n      })\n      .done((res, textStatus, xhr) => {\n        const url = this.options.endpoint + '/'\n          + this.constructor.trimSlashes(this.options.subfolder) + '/'\n          + this.constructor.trimSlashes(path);\n\n        this.trigger('success', url, xhr);\n      })\n      .fail((xhr) => {\n        console.error(xhr);\n        this.trigger('fail');\n      })\n      .always(() => {\n        this.trigger('end');\n      });\n  }\n\n  static trimSlashes(str) {\n    return str.replace(/^\\/+|\\/+$/g, '');\n  }\n}\n"],"file":"s3-uploader.js"}